let addSong filepath biblio =
  let rec checkExist = function
    |[] -> false
    |(_,_,_,_,file)::_ when file = filepath -> true
    |(_,_,_,_,_)::t -> checkExist t in
  if (checkExist !biblio) then () else
    begin
      let title = ref "" and album = ref "" and year = ref "" in
      let comment = ref "" and genre = ref "" and artist = ref "" in
      let tracknum = ref "" in
      if Meta.Id3v1.has_tag filepath then
        begin
          let t = Meta.v1_of_v2 (Meta.read_both_as_v2 filepath) in
          title := t.Meta.Id3v1.title ;
          artist := t.Meta.Id3v1.artist ;
          album := t.Meta.Id3v1.album ;
          year := t.Meta.Id3v1.year ;
          comment := t.Meta.Id3v1.comment ;
          tracknum := (string_of_int(t.Meta.Id3v1.tracknum));
          genre := getGenre(t.Meta.Id3v1.genre);
        end;
      biblio := !biblio @ [(!title,!artist,!album,!genre,filepath)]
    end

let addPlaylist filepath biblio =
  let ic = open_in filepath in
  (try
    while true; do
      addSong (input_line ic) biblio;
    done;
  with End_of_file ->
    close_in ic)
    
let saveBiblio () =
  let oc = open_out "bin/biblio" in
  let store = Ettoihc.storeBiblio in
  let first = store#get_iter_first in
  begin
  match first with
  |Some iter ->
    Printf.fprintf oc "%s\n"(store#get ~row:iter ~column:Ettoihc.pathBiblio);

    while store#iter_next iter do
      Printf.fprintf oc "%s\n"(store#get ~row:iter ~column:Ettoihc.pathBiblio)
    done
  |None -> ()
  end;
  close_out oc
